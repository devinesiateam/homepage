[{"categories":["Website","Laravel"],"contents":"Mungkin kita pernah bertanya \u0026ldquo;Bagaimana cara meningkatkan skill laravel saya\u0026rdquo;, karena di Laravel kamu bukan cuma dapat membuat web CRUD :D\nBerikut topik dan link-link yang telah saya rangkum\nTopik 1: Mengirim email dan notifikasi Mungkin ini terlihat sederhana, namun faktanya masih banyak yang belum mengetahui hal ini khususnya bagi mereka yang baru belajar Laravel\nSending Laravel notifications: https://laravel.com/docs/5.8/notifications Email templates – customization, Markdown messages; Memasukkan email ke queue Menggunakan layanan eksternal untuk mengirim email – Mailgun, Mailchimp dll. Topik 2: Queues dan Jobs Aplikasi web modern lebih dari sekadar menampilkan halaman di browser, banyak hal yang terjadi di belakang server, meskipun pengguna tidak online sekalipun. Queue penting untuk dipelajari.\nLaravel Queues dan Jobs official documentation; Laravel Horizon – dashboard untuk memonitori queues; Redis – most popular driver to use for queues (you need to be able to install and configure it); Jobs, Queues and Scheduling Tasks Demystifying Laravel Queues – artikel di Dev.to. Catatan: Jobs mungkin tidak dapat diantrekan (queue) dan hanya dijalankan setiap kali kamu memintanya, bahkan dalam mode sinkronisasi, tapi tetap bagus untuk latihan dan struktur project yang akan kamu buat kedepan.\nTopik 3: Advanced Eloquent dan DB Operations Eloquent adalah mekanisme yang powerfull pada Laravel untuk berurusan dengan operasi Database, akan tetapi masih banyak fungsi-fungsi yang jarang diketahui seperti: Observers, Accessors/Mutators, Seeding, “magic methods” seperti firstOrCreate(),Collections dll.\nEloquent: Expert Level Eloquent Relationships: The Ultimate Guide; Model Observers – official documentation; Accessors and Mutators – official documentation; Collection Essentials – video dari Laracasts. Topic 4: Advanced Error/Exception Managing dan Preventing Bug adalah sesuatu yang pastinya sering terjadi dan itu normal dan proses development. Tapi kamu dapat melakukan beberapa hal untuk mencegah dan memperbaikinya dengan lebih mudah. Menggunakan try-catch, membuat exception, mengkonfigurasi logging, menggunakan tools seperti Bugsnag/Rollbar/Sentry, mengirim notifikasi error ke email dll.\nLaravel Exceptions: How to Catch, Handle and Create Your Own; Laravel API Errors and Exceptions: How to Return Responses; PHP Try Catch: Basics \u0026amp; Advanced PHP Exception Handling Tutorial; Laravel Error Handling – official documentation. Topik 5: Artisan Commands Kita mungkin sering menggunakan perintah seperti \u0026ldquo;php artisan migrate\u0026rdquo; atau \u0026ldquo;php artisan make: model\u0026rdquo;, tetapi akan lebih berguna pastinya untuk membuat perintah kamu sendiri yang nanti bisa di masukkan ke jobs queue.\nWriting Artisan Commands – official documentation; List of 16 artisan make:XXXX Commands with Parameters; Writing Custom Laravel Artisan Commands Topik 6: APIs Resources, Auth and Passport Yang ini cukup luas - seluruh dunia mulai menggunakan API, dan tentunya kamu perlu mempelajarinya juga.\nEloquent: API Resources – official documentation; Laravel API Tutorial: How to Build and Test a RESTful API – artikel dari Toptal; Build a REST API with Laravel API resources– artikel dari Pusher; Laravel API Authentication – official documentation; Laravel Passport – official documentation; Laravel API Errors and Exceptions: How to Return Responses. Topik 7: Events dan Listeners Topik yang kecil namun menjelesakan salah satu design pattern pada Laravel.\nLaravel Events – official documentation; Custom Events in Laravel – article from TutsPlus. Topik 8: Payments dan Cashier Jika kamu mengerjakan proyek besar, mungkin akan memerlukan semacam pembayaran. Ada berbagai metode pembayaran gateway. Disini saya akan merekomendasikan menggunakan stripe sebagai latihan walaupun mungkin tidak akan digunakan di production.\nStripe Payments in Laravel: The Ultimate Guide; PayPal payments in Laravel: The Ultimate Guide; Laravel Cashier – official documentation; Laravel Cashier (Braintree) – official documentation. Topik 9: Automated Testing, TDD dan Dusk Ini adalah topik yang menarik. Haruskah kita melakukan unit testing? Haruskah kita melakukan TDD? (test-driven development) Jenis test apa yang kita buat? Bagaimana cara membuatnya berjalan mulus?\nKamu harus memiliki beberapa test otomatis untuk bagian penting dari aplikasi - terutama yang berkaitan dengan transaksi uang, atau otentikasi. Pada dasarnya, uji semua yang penting, jika gagal. Menguji yang lain bukanlah prioritas.\nLaravel Testing: Getting Started – official documentation; Test-Driven Laravel – Kursus oleh Adam Wathan; Laravel Dusk – official documentation; Build A Laravel App With TDD – Laracasts Series; How to build a Laravel REST API with Test-Driven Development – artikel dari freeCodeCamp; Simple TDD in Laravel with 11 steps – artikel dari Medium. Topik 10: Deployment ke Servers dan integrasi berkelanjutan Terkait dengan topik sebelumnya, kamu harus menjalankan pengujian otomatis pada server, dan idealnya menyiapkannya untuk berjalan secara otomatis.\nBeberapa dari wawasan ini tidak hanya untuk Laravel - kamu perlu tahu cara mengatur dan mengkonfigurasi server baru, bagaimana melakukan git branching dan bagaimana meng-push code kamu dengan benar (terutama jika kamu bekerja di tim), cara melakukan penerapan zero-time, rollback jika terjadi sesuatu, dll.\nLaravel Deployment – official documentation; How to Deploy Laravel Projects to Live Server: The Ultimate Guide; Laravel Forge – layanan untuk mendeploy Laravel dalam beberapa menit Envoyer.io – zero-time PHP deployment, official tool by Laravel; Laravel Continuous Deployment With CircleCI and Deployer. Sumber: https://laraveldaily.com/advanced-laravel-20-topics-and-links-to-learn-them/\n","permalink":"/posts/laravel-advanced-10-topik-dan-link-untuk-mempelajarinya/","tags":null,"title":"Laravel Advanced: 10 Topik dan Link Untuk Mempelajarinya"},{"categories":null,"contents":"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n","permalink":"/author/fikri-r/","tags":null,"title":"Fikri R"},{"categories":["Website"],"contents":"Website adalah sekelompok halaman website yang dapat diakses secara global dan terkait satu sama lain dengan domain. Biasa dikembangkan dan dikendalikan oleh individu, perusahaan atau organisasi. Website memiliki beberapa tujuan seperti: blog, profil perusahaan, dll.\nApa itu web application? Adalah sebuah program website yang dapat diakses oleh browser apa saja, biasanya bagian frontend dibangun menggunakan bahasa seperti HTML, CSS, Javascript yang mana di dukung oleh banyak browser. Untuk bagian backend (berhubungan dengan database) biasa menggunakan bahasa pemrograman seperti PHP, Javascript (nodejs), ruby, python. Tidak seperti aplikasi mobile yang memerlukan SDK khusus untuk mengembangkan aplikasi.\nAplikasi website menjadi terkenal dengan munculnya Software as a Service (SaaS)\nMengapa kamu butuh website? Inilah alasan utama mengapa kamu membutuhkan situs web:\nMetode yang efektif untuk menampilkan produk dan layanan kamu Mengembangkan situs membantu kamu membuat testimoni sosial Membantu kamu dalam merek bisnis kamu Membantu kamu mencapai tujuan bisnis kamu Memungkinkan kamu untuk meningkatkan dukungan pelanggan kamu Mengapa kamu butuh aplikasi web? Aplikasi web lebih populer karena alasan berikut:\nDibandingkan dengan aplikasi desktop, aplikasi web lebih mudah dikelola karena mereka menggunakan kode yang sama di seluruh aplikasi. Tidak ada masalah kompatibilitas. Aplikasi web dapat digunakan di semua platform: Windows, Linux, Mac… karena semuanya mendukung browser modern. Tidak memerlukan ijin akses seperti aplikasi mobile yang diperlukan dalam aplikasi web. Dirilis kapan saja dan dalam bentuk apa pun. Tidak perlu mengingatkan pengguna untuk mengupdate aplikasi mereka. kamu dapat mengakses aplikasi web ini 24 jam sehari dan 365 hari setahun dari PC mana pun. kamu dapat menggunakan komputer atau perangkat seluler kamu untuk mengakses data yang diperlukan. Aplikasi web adalah pilihan hemat biaya untuk organisasi mana pun. Lisensi untuk perangkat lunak Desktop mahal di SasS, umumnya, bayar sesuai pemakaian. Aplikasi Berbasis Web adalah aplikasi yang diakses melalui browser web seluler. Oleh karena itu, kamu tidak perlu mengunduh atau menginstalnya. Kekurangan website Sebuah situs web bisa crash/error yang tidak bagus untuk penggunanya. Ini adalah kerugian terbesar bagi bisnis kamu Formulir kontak yang dipublikasikan di situs web mungkin mengundang banyak email spam yang tidak diinginkan. Informasi di situs web mana pun mungkin tidak dapat diandalkan jika tidak diperbarui secara rutin. Kekurangan Aplikasi Web Keamanan tidak dijamin, sehingga rentan terhadap akses yang tidak di inginkan. Aplikasi web mungkin tidak mendukung beberapa browser dengan prioritas yang sama. Aplikasi web dibuat secara eksplisit untuk sistem operasi tertentu, sehingga sulit ditemukan dari app store. Cakupan terbatas untuk mengakses fitur perangkat. ","permalink":"/posts/perbedaan-antara-website-dan-aplikasi/","tags":null,"title":"Perbedaan Antara Website dan Aplikasi Web"},{"categories":null,"contents":"","permalink":"/blog/","tags":null,"title":"Blog"},{"categories":null,"contents":"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labor.\n","permalink":"/contact/","tags":null,"title":"Contact Us"}]